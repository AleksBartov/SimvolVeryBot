import userService from '../services/userService.js';
import { Markup } from 'telegraf';

class NavigationHandler {
  constructor(flowHandler) {
    this.flowHandler = flowHandler;
  }

  async handleNextStep(ctx) {
    const userId = ctx.from.id;
    
    try {
      const user = await userService.getUser(userId);
      const nextStep = user.current_step + 1;
      
      console.log(`üîÑ [Navigation] User ${userId}: ${user.current_step} ‚Üí ${nextStep}`);
      
      await userService.updateUserStep(userId, nextStep);
      await this.deleteMessage(ctx);
      
      const handled = await this.flowHandler.handleStep(ctx, nextStep);
      
      if (!handled) {
        await this.showCompletionMessage(ctx);
      }
      
    } catch (error) {
      console.error('Error in next step:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å /start');
    }
  }

  async handlePrevStep(ctx) {
    const userId = ctx.from.id;
    
    try {
      const user = await userService.getUser(userId);
      const prevStep = Math.max(0, user.current_step - 1);
      
      console.log(`üîô [Navigation] User ${userId}: ${user.current_step} ‚Üí ${prevStep}`);
      
      await userService.updateUserStep(userId, prevStep);
      await this.deleteMessage(ctx);
      
      const handled = await this.flowHandler.handleStep(ctx, prevStep);
      
      if (!handled) {
        await this.showCompletionMessage(ctx);
      }
      
    } catch (error) {
      console.error('Error in prev step:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å /start');
    }
  }

  async showCompletionMessage(ctx) {
    await ctx.replyWithMarkdown(
      `üìñ *–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n\n*–°–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:*\n‚Ä¢ –£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —á–ª–µ–Ω–æ–≤ –°–∏–º–≤–æ–ª–∞ –≤–µ—Ä—ã\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n‚Ä¢ –í—Å—Ç—Ä–µ—á–∏ —Å –¥—É—Ö–æ–≤–Ω–∏–∫–æ–º`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', 'restart')]
      ])
    );
  }

  async deleteMessage(ctx) {
    try {
      await ctx.deleteMessage();
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    }
  }
}

export default NavigationHandler;