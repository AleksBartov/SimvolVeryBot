import { Telegraf } from 'telegraf';
import express from 'express';
import dotenv from 'dotenv';
import startHandler from './handlers/startHandler.js';
import navigationHandler from './handlers/navigationHandler.js';
import NotificationService from './services/notificationService.js';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
const notificationService = new NotificationService(bot);
notificationService.startDailyChecks();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
bot.start((ctx) => startHandler.handleStart(ctx));
bot.action('next_step', (ctx) => navigationHandler.handleNextStep(ctx));
bot.action('prev_step', (ctx) => navigationHandler.handlePrevStep(ctx));
bot.action('restart', (ctx) => startHandler.handleStart(ctx));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
bot.on('text', async (ctx) => {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert-—Å–æ–æ–±—â–µ–Ω–∏–µ
  await ctx.replyWithMarkdown(
    '‚ö†Ô∏è *–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ "–î–∞–ª–µ–µ" –∏–ª–∏ "–ù–∞–∑–∞–¥"*',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', callback_data: 'restart' }]
        ]
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
bot.on(['photo', 'video', 'audio', 'document', 'voice', 'sticker'], async (ctx) => {
  await ctx.replyWithMarkdown(
    '‚ö†Ô∏è *–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ "–î–∞–ª–µ–µ" –∏–ª–∏ "–ù–∞–∑–∞–¥"*',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', callback_data: 'restart' }]
        ]
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  await ctx.replyWithMarkdown(
    '‚ö†Ô∏è *–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ "–î–∞–ª–µ–µ" –∏–ª–∏ "–ù–∞–∑–∞–¥"*',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', callback_data: 'restart' }]
        ]
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback_data
bot.on('callback_query', async (ctx) => {
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
  await ctx.answerCbQuery();
  
  await ctx.replyWithMarkdown(
    '‚ö†Ô∏è *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏*',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', callback_data: 'restart' }]
        ]
      }
    }
  );
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`‚ùå Global error for ${ctx.updateType}:`, err);
  
  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  ctx.replyWithMarkdown(
    '‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞*',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', callback_data: 'restart' }]
        ]
      }
    }
  ).catch(e => {
    console.error('Even error message failed:', e);
  });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
}).catch(err => {
  console.error('‚ùå Failed to launch bot:', err);
});

// Express –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
app.use(express.json());
app.get('/', (req, res) => {
  res.send('–ë–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –°–∏–º–≤–æ–ª–∞ –í–µ—Ä—ã –∞–∫—Ç–∏–≤–µ–Ω!');
});

app.listen(process.env.PORT || 3000, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT || 3000}`);
});

// –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  console.log('üõë Bot stopping (SIGINT)');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  console.log('üõë Bot stopping (SIGTERM)');
  bot.stop('SIGTERM');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
});